# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode:nil -*-
# vi: set ft=python sts=4 ts=4 sw=4 et:

import os
import numpy as np
import nibabel as nib
import pandas as pd
import csv


def vox2MNI(vox,affine):
    vox_new = np.ones([4,1])
    vox_new[0:-1,0] = vox[:]
    MNI = affine.dot(vox_new)
    MNI_new = MNI[0:-1].tolist()    # transform array into list
    return sum(MNI_new,[])  # extend multiple list

def dice(image1,image2):
    image1_instead = image1
    image2_instead = image2
    image1_instead[image1_instead!=0]=1
    image2_instead[image2_instead!=0]=1
    overlap = image1*image2
    dice_num = 2*overlap.sum()/(image1.sum()+image2.sum())
    return dice_num

def bluring():
    pass    




# input variable,sesspar
sesspar = '/nfs/j3/userhome/huangtaicheng/workingdir/parcellation_MT/BAA/SSR'
# input variable,sessid
obj_file = open('/nfs/j3/userhome/huangtaicheng/workingdir/parcellation_MT/doc/dfsf/sub/subjID','rU')
sessid = obj_file.read().splitlines()
obj_file.close()
# output path
outpath = '/nfs/j3/userhome/huangtaicheng/workingdir/try_htc/mt_analysis/'

#input variable,task
task = 'mt'
#input variable,contrast
contrast = 'motion'
idnum = len(sessid)
areanum = 4

volume = np.zeros([idnum,areanum])
mpsc = np.zeros([idnum,areanum])
mzstat = np.zeros([idnum,areanum])
ppsc = np.zeros([idnum,areanum])
pzstat = np.zeros([idnum,areanum])
peak_cor = np.zeros([idnum,areanum,3])
sessi = 0

for sess in sessid:
    # Q1:how to express names of mt_z5.0_ff.nii.gz
    pathmt = os.path.join(sesspar,sess,task,contrast,'mt_z5.0_ff.nii.gz')
    # Q2:how to express names of cope1.nii.gz
    pathbeta = os.path.join(sesspar,sess,task,contrast,'cope1.nii.gz')
    pathstat = os.path.join(sesspar,sess,task,contrast,'zstat1.nii.gz')
    img_zsta = nib.load(pathstat)
    data_zsta = img_zsta.get_data()
    img_mt = nib.load(pathmt)
    data_mt = img_mt.get_data()
    img_beta = nib.load(pathbeta)
    data_beta = img_beta.get_data()    
    
    affine = img_zsta.get_affine()
    
    for areai in range(areanum):
  
        temp = np.zeros([91,109,91]) 
        volume[sessi,areai] = np.sum(data_mt == (areai+1))*(2*2*2)      
        if data_beta[data_mt == (areai+1)] != []:
            # mean psc has multiplied 100
            mpsc[sessi,areai] = np.nanmean(data_beta[data_mt == (areai+1)])/100
            # peak psc has multiplied 100
            ppsc[sessi,areai] = np.nanmax(data_beta[data_mt == (areai+1)])/100  
            # mean zstate value
            mzstat[sessi,areai] = np.nanmean(data_zsta[data_mt == (areai+1)]) 
            # peak zstate value
            pzstat[sessi,areai] = np.nanmax(data_zsta[data_mt == (areai+1)])
        # peak coordinate,need a middle variable 'temp'        
        temp[data_mt == (areai+1)] = data_zsta[data_mt == (areai+1)]
        peak_cor[sessi,areai,:] = np.unravel_index(temp.argmax(),temp.shape)
        if not any(peak_cor[sessi,areai,:]):
            peak_cor[sessi,areai,:] = [np.nan,np.nan,np.nan]
        peak_cor[sessi,areai,:] = vox2MNI(peak_cor[sessi,areai,:],affine)
    sessi+=1
     
   
# make file
# Q3:how to represent peak coordinate
areaname = ['rV3','lV3','rMT','lMT']

for areai in range(areanum):
    writer = csv.writer(file(os.path.join(outpath,areaname[areai]+'.csv'),'wb'))
    writer.writerow(['NSPID','volume','mean_psc','peak_psc','mean_zstate',
                    'peak_zstate','px','py','pz'])
    wholedata = zip(list(sessid),list(volume[:,areai]),list(mpsc[:,areai]),
                list(ppsc[:,areai]),list(mzstat[:,areai]),list(pzstat[:,areai]),                list(peak_cor[:,areai,0]),list(peak_cor[:,areai,1]),
                list(peak_cor[:,areai,2]))
    writer.writerows(wholedata)



#    df = pd.DataFrame({'NSPID':sessid,
#                      'volume':volume[:,areai],
#                      'psc':psc[:,areai]
#                      ''})
#    df.to_csv(areaname[areai]+'.csv',index=False)
    






